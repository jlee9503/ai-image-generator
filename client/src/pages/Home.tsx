import { useCallback, useEffect, useState } from "react";

import FormField from "../components/FormField";
import Loader from "../components/Loader";
import Card from "../components/Card";

interface ICards {
  data: IPostData[] | null;
  statusMsg: string;
}

interface IPostData {
  name: string;
  photo: string;
  prompt: string;
  __v: number;
  _id: string;
}

const RenderCards = ({ data, statusMsg }: ICards) => {
  if (data != null && data.length > 0) {
    return data.map((post) => (
      <Card
        key={post._id}
        _id={post._id}
        name={post.name}
        prompt={post.prompt}
        photo={post.photo}
      />
    ));
  } else {
    return <h2>{statusMsg}</h2>;
  }
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState<IPostData[] | null>(null);
  const [searchText, setSearchText] = useState("");
  const [searchPosts, setSearchPosts] = useState<IPostData[] | null>(null);

  const fetchPostData = async () => {
    setLoading(true);

    try {
      const response = await fetch("http://localhost:8080/api/post", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const result = await response.json();
        // console.log(result.data)
        const postData: IPostData[] = result.data.reverse();
        // console.log(postData);
        setAllPosts(postData);
      }
    } catch (error) {
      alert(error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPostData();
  }, []);

  const handleSearchText = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      setSearchText(e.target.value);
      const searchResult = allPosts?.filter(
        (item) =>
          item.name.toLowerCase().includes(searchText.toLowerCase()) ||
          item.prompt.toLowerCase().includes(searchText.toLowerCase())
      );

      if (searchResult) {
        setSearchPosts(searchResult);
      }
    },
    [allPosts, searchText]
  );

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-slate-700 text-xl">
          The Community showcase
        </h1>
        <p className="mt-2 text-slate-400">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search Posts"
          type="text"
          name="searchpost"
          placeholder="Search keyword..."
          handleChange={handleSearchText}
          value={searchText}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <div>
            {searchText && (
              <div className="text-slate-400 font-medium text-xl mb-3">
                Showing results for{" "}
                <span className="text-slate-700">{searchText}</span>
              </div>
            )}
            <div className="grid grid-cols-1 xs:grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchPosts}
                  statusMsg="No search results found"
                />
              ) : (
                <RenderCards data={allPosts} statusMsg="No posts found" />
              )}
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default Home;
